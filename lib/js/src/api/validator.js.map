{"version":3,"sources":["../src/api/validator.ts"],"names":[],"mappings":";AAGA,2BAAuB,YAAY,CAAC,CAAA;AAKpC;IAAA;QACE,WAAM,GAAoB,EAAE,CAAC;IAqF/B,CAAC;IA/EC,SAAS;QACP,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAClC,CAAC;IAQD,QAAQ,CAAC,KAAU,EAAE,MAAM,GAAW,eAAe;QACnD,IAAI,MAAM,GAAQ,MAAM,CAAC,KAAK,CAAC,CAAC;QAChC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,mBAAQ,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC;QACxD,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAQD,KAAK,CAAC,KAAU,EAAE,MAAM,GAAW,eAAe;QAChD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACvB,CAAC;IAQD,MAAM,CAAC,KAAU,EAAE,MAAM,GAAW,eAAe;QACjD,IAAI,MAAM,GAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;QAClC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACZ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,mBAAQ,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC;QACxD,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAQD,eAAe,CAAC,KAAU,EAAE,MAAM,GAAW,eAAe;QAC1D,IAAI,MAAM,GAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;QAClC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACZ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,mBAAQ,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC;QACxD,CAAC;QACD,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QAC7C,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAKD,SAAS,CAAC,KAAU,EAAE,MAAM,GAAW,eAAe;QACpD,EAAE,CAAC,CAAC,KAAK,KAAK,OAAO,OAAO,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACxB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,mBAAQ,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IAOD,MAAM,CAAC,IAAa,EAAE,MAAc;QAClC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACV,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,mBAAQ,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC;QACxD,CAAC;IACH,CAAC;AACH,CAAC;AAtFY,iBAAS,YAsFrB,CAAA","file":"validator.js","sourcesContent":["// Copyright 2016 Frank Lin (lin.xiaoe.f@gmail.com). All rights reserved.\n// Use of this source code is governed a license that can be found in the LICENSE file.\n\nimport {ApiError} from './apierror';\n\n/**\n * Utility to validate input parameters and used by Controller.\n */\nexport class Validator {\n  errors: Array<ApiError> = [];\n\n  /**\n   * Returns true if encounter errors through routine.\n   * @returns {boolean} true if encounter errors through routine.\n   */\n  hasErrors(): boolean {\n    return (this.errors.length > 0);\n  }\n\n  /**\n   * Casts any type to number and record error if result is not a number.\n   * @param param Any type of input value.\n   * @param reason Error reason.\n   * @returns {number} Result, should be number type if success.\n   */\n  toNumber(param: any, reason: string = 'param invalid'): number {\n    let result: any = Number(param);\n    if (isNaN(result)) {\n      this.errors.push(new ApiError(reason, 'Bad Request'));\n    }\n    return result;\n  }\n\n  /**\n   * Casts any type to string.\n   * @param param Any type of input value.\n   * @param reason Error reason.\n   * @returns {String} Result, should be string type if success.\n   */\n  toStr(param: any, reason: string = 'param invalid'): string {\n    return String(param);\n  }\n\n  /**\n   * Casts any type to date.\n   * @param param Any type of input value.\n   * @param reason Error reason.\n   * @returns {String} Result, should be date type if success.\n   */\n  toDate(param: any, reason: string = 'param invalid'): Date {\n    let result: any = new Date(param);\n    if (!result) {\n      this.errors.push(new ApiError(reason, 'Bad Request'));\n    }\n    return result;\n  }\n\n  /**\n   * Casts any type to unix timestamp.\n   * @param param Any type of input value.\n   * @param reason Error reason.\n   * @returns {String} Result, should be number(int) if success.\n   */\n  toUnixTimestamp(param: any, reason: string = 'param invalid'): number {\n    let result: any = new Date(param);\n    if (!result) {\n      this.errors.push(new ApiError(reason, 'Bad Request'));\n    }\n    result = Math.floor(result.getTime() / 1000);\n    return result;\n  }\n\n  /**\n   * Casts any type to boolean.\n   */\n  toBoolean(param: any, reason: string = 'param invalid'): Boolean {\n    if (param === typeof Boolean) {\n      return Boolean(param);\n    } else {\n      this.errors.push(new ApiError(reason, 'Bad Request'));\n      return param;\n    }\n  }\n\n  /**\n   * Asserts condition is true, otherwise it will records the error.\n   * @param cond Condition.\n   * @param reason Error reason.\n   */\n  assert(cond: boolean, reason: string): void {\n    if (!cond) {\n      this.errors.push(new ApiError(reason, 'Bad Request'));\n    }\n  }\n}\n"]}