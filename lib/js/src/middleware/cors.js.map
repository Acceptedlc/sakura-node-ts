{"version":3,"sources":["../src/middleware/cors.ts"],"names":[],"mappings":";AAQA;IACE,MAAM,CAAC,CAAC,GAAoB,EAAE,GAAqB,EAAE,IAA0B;QAC7E,MAAM,aAAa,GAAW,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACnD,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,IAAI,EAAE,CAAC;QAChB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,GAAG,CAAC,SAAS,CAAC,6BAA6B,EAAE,aAAa,CAAC,CAAC;QAC9D,CAAC;QAED,MAAM,YAAY,GAAW,GAAG,CAAC,MAAM,CAAC,8BAA8B,CAAC,CAAC;QACxE,MAAM,aAAa,GAAW,GAAG,CAAC,MAAM,CAAC,8BAA8B,CAAC,CAAC;QAEzE,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACjB,GAAG,CAAC,SAAS,CAAC,8BAA8B,EAAE,YAAY,CAAC,CAAC;QAC9D,CAAC;QAED,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YAClB,GAAG,CAAC,SAAS,CAAC,8BAA8B,EAAE,aAAa,CAAC,CAAC;QAC/D,CAAC;QAED,GAAG,CAAC,SAAS,CAAC,kCAAkC,EAAE,MAAM,CAAC,CAAC;QAC1D,MAAM,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC;AAvBe,qBAAa,gBAuB5B,CAAA;AAKD;IACE,MAAM,CAAC,CAAC,GAAoB,EAAE,GAAqB,EAAE,IAA0B;QAE7E,GAAG,CAAC,SAAS,CAAC,6BAA6B,EAAE,GAAG,CAAC,CAAC;QAGlD,GAAG,CAAC,SAAS,CAAC,8BAA8B,EAAE,wCAAwC,CAAC,CAAC;QAGxF,GAAG,CAAC,SAAS,CAAC,8BAA8B,EAAE,qCAAqC,CAAC,CAAC;QAIrF,GAAG,CAAC,SAAS,CAAC,kCAAkC,EAAE,MAAM,CAAC,CAAC;QAG1D,IAAI,EAAE,CAAC;IACT,CAAC,CAAC;AACJ,CAAC;AAlBe,oBAAY,eAkB3B,CAAA","file":"cors.js","sourcesContent":["// Copyright 2016 Frank Lin (lin.xiaoe.f@gmail.com). All rights reserved.\n// Use of this source code is governed a license that can be found in the LICENSE file.\n\nimport * as express from \"express\";\n\n/**\n * CORS middleware for allowing restrict request.\n */\nexport function corsAllowOnce(): (req: express.Request, res: express.Response, next: express.NextFunction) => void {\n  return (req: express.Request, res: express.Response, next: express.NextFunction) => {\n    const requestOrigin: string = req.header('Origin');\n    if (!requestOrigin) {\n      return next();\n    } else {\n      res.setHeader('Access-Control-Allow-Origin', requestOrigin);\n    }\n\n    const customMethod: string = req.header('Access-Control-Allow-Methods');\n    const customHeaders: string = req.header('Access-Control-Allow-Headers');\n\n    if (customMethod) {\n      res.setHeader('Access-Control-Allow-Methods', customMethod);\n    }\n\n    if (customHeaders) {\n      res.setHeader('Access-Control-Allow-Headers', customHeaders);\n    }\n\n    res.setHeader('Access-Control-Allow-Credentials', 'true');\n    return next();\n  };\n}\n\n/**\n * Token middleware for parsing token and add 'uid' to express.Request.\n */\nexport function corsAllowAll(): (req: express.Request, res: express.Response, next: express.NextFunction) => void {\n  return (req: express.Request, res: express.Response, next: express.NextFunction) => {\n    // Website you wish to allow to connect\n    res.setHeader('Access-Control-Allow-Origin', '*');\n\n    // Request methods you wish to allow\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n\n    // Request headers you wish to allow\n    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type,Token');\n\n    // Set to true if you need the website to include cookies in the requests sent\n    // to the API (e.g. in case you use sessions)\n    res.setHeader('Access-Control-Allow-Credentials', 'true');\n\n    // Pass to next layer of middleware\n    next();\n  };\n}\n"]}