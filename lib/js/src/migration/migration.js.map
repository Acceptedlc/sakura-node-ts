{"version":3,"sources":["../src/migration/migration.ts"],"names":[],"mappings":"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","file":"migration.js","sourcesContent":["// Copyright 2016 Frank Lin (lin.xiaoe.f@gmail.com). All rights reserved.\n// Use of this source code is governed a license that can be found in the LICENSE file.\n\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport {\n  Operation, AddModelOperation, AddColumnOperation, DropColumnOperation,\n  RenameColumnOperation, InitCommentOperation\n} from './operation';\nimport {Field} from './column';\nimport {PgClient} from '../database/pgclient';\nimport {SelectQuery} from '../sqlquery/selectquery';\nimport {Version} from './version';\nimport {PgQueryResult} from '../base/typedefines';\nimport {InsertQuery} from '../sqlquery/insertquery';\nimport {sqlGenerator} from '../tools/sqlgenerator';\n\n/**\n * Migration tool for PostgreSQL.\n *\n * Usage:\n *  let migration = new Migration();\n *  migration.addModel(User); // Adds User's table.\n *  migration.migrate(); // migrate database.\n */\nexport class Migration {\n  private version_: number = 0;\n  private pgInstance_: PgClient = undefined;\n\n  private operations_: Array<Operation> = [];\n  private dependencies_: Array<Migration> = [];\n\n  /**\n   * Init with current migration version, be sure to use INTEGER value.\n   * @param version Current version.\n   * @param pgClient Postgres connection.\n   */\n  constructor(version: number, pgClient: PgClient) {\n    this.version_ = version;\n    this.pgInstance_ = pgClient;\n  }\n\n  /**\n   * Adds model's table.\n   * @param cls Class extends model.\n   */\n  addModel(cls: Function): void {\n    this.operations_.push(new AddModelOperation(cls));\n    this.operations_.push(new InitCommentOperation(cls));\n  }\n\n  /**\n   * Adds column to existing table.\n   * @param cls Class extends model.\n   * @param column New column.\n   */\n  addColumn(cls: Function, column: Field): void {\n    this.operations_.push(new AddColumnOperation(cls, column));\n  }\n\n  /**\n   * Drops column from existing table.\n   * @param cls Class extends model.\n   * @param columnName Column name.\n   */\n  dropColumn(cls: Function, columnName: string): void {\n    this.operations_.push(new DropColumnOperation(cls, columnName));\n  }\n\n  /**\n   * Renames column in existing table.\n   * @param cls Class extends model.\n   * @param oldName Old name.\n   * @param newName New name.\n   */\n  renameColumn(cls: Function, oldName: string, newName: string): void {\n    this.operations_.push(new RenameColumnOperation(cls, oldName, newName));\n  }\n\n  /**\n   * Adds dependency in order, dependency is another migration.\n   * @param dependency Previous version migration.\n   */\n  addDependency(dependency: Migration): void {\n    this.dependencies_.push(dependency);\n  }\n\n  /**\n   * Use dependency array as dependencies.\n   * @param dependencies All previous migrations.\n   */\n  setDependencies(dependencies: Migration[]): void {\n    this.dependencies_ = dependencies;\n  }\n\n  /**\n   * Returns current version as number or undefined is table not exists.\n   * @private\n   */\n  private async currentVersion_(): Promise<number | undefined> {\n    // create table\n    const createTableSql: string = sqlGenerator.generateCreateTableSql(Version);\n    await this.pgInstance_.query(createTableSql);\n\n    const sql: string = new SelectQuery().fromClass(Version).select().build();\n    const result: PgQueryResult = await this.pgInstance_.query(sql);\n    if (result.rows.length > 0) {\n      return result.rows[0]['version'];\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * Generates SQL to migrate.\n   * @returns {string} SQL.\n   */\n  preview(): string {\n    let sql: string = '';\n\n    for (let i = 0; i < this.operations_.length; i++) {\n      let operation: Operation = this.operations_[i];\n      sql += operation.sql();\n\n      if (i !== this.operations_.length - 1) {\n        sql += '\\n';\n      }\n    }\n\n    return sql;\n  }\n\n  /**\n   * Saves migration result to file.\n   * @param path Full path of file.\n   */\n  save(path: string): void {\n    const sql: string = this.preview();\n    fs.writeFile(path, sql);\n  }\n\n  /**\n   * Executes migrate sql commands, it is highly recommended to use preview() to see sql before use this method.\n   */\n  async migrate(setupEnv: boolean = false): Promise<void> {\n    // init PG\n    if (this.pgInstance_ === undefined) {\n      throw new Error('UNDEFINED_PG_CLIENT_SHARED_INSTANCE');\n    }\n\n    // check version\n    const currentVersion: number | undefined = await this.currentVersion_();\n    if (currentVersion === undefined) { // first time to execute query\n      let version: Version = new Version();\n      version.version = this.version_;\n      const insertSql: string = new InsertQuery().fromModel(version).build();\n\n      await this.pgInstance_.query(insertSql);\n    } else if (this.version_ === currentVersion) { // version does not change\n      return;\n    }\n\n    // run dependencies\n    for (let dependency of this.dependencies_) {\n      await dependency.migrate();\n    }\n\n    // run operations\n    let sqls: Array<string> = [];\n\n    // create necessary functions\n    if (setupEnv) {\n      let setupEnvSql: string = fs.readFileSync(path.resolve('sql/setup_pg.sql'), 'utf8') + '\\n';\n      sqls.push(setupEnvSql);\n    }\n\n    for (let operation of this.operations_) {\n      sqls.push(operation.sql());\n    }\n\n    await this.pgInstance_.queryInTransaction(sqls);\n  }\n}\n"]}