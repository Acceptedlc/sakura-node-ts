{"version":3,"sources":["../src/migration/migration.ts"],"names":[],"mappings":"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","file":"migration.js","sourcesContent":["// Copyright 2016 Frank Lin (lin.xiaoe.f@gmail.com). All rights reserved.\n// Use of this source code is governed a license that can be found in the LICENSE file.\n\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport {\n  Operation, AddModelOperation, AddColumnOperation, DropColumnOperation,\n  RenameColumnOperation, InitCommentOperation\n} from './operation';\nimport {Field} from './column';\nimport {PgClient} from '../database/pgclient';\n\n/**\n * Migration tool for PostgreSQL.\n *\n * Usage:\n *  let migration = new Migration();\n *  migration.addModel(User); // Adds User's table.\n *  migration.migrate(); // migrate database.\n */\nexport class Migration {\n  private operations_: Array<Operation> = [];\n  private dependencies_: Array<Migration> = [];\n\n  /**\n   * Adds model's table.\n   * @param cls Class extends model.\n   */\n  addModel(cls: Function): void {\n    this.operations_.push(new AddModelOperation(cls));\n    this.operations_.push(new InitCommentOperation(cls));\n  }\n  /**\n   * Adds column to existing table.\n   * @param cls Class extends model.\n   * @param column New column.\n   */\n  addColumn(cls: Function, column: Field): void {\n    this.operations_.push(new AddColumnOperation(cls, column));\n  }\n\n  /**\n   * Drops column from existing table.\n   * @param cls Class extends model.\n   * @param columnName Column name.\n   */\n  dropColumn(cls: Function, columnName: string): void {\n    this.operations_.push(new DropColumnOperation(cls, columnName));\n  }\n\n  /**\n   * Renames column in existing table.\n   * @param cls Class extends model.\n   * @param oldName Old name.\n   * @param newName New name.\n   */\n  renameColumn(cls: Function, oldName: string, newName: string): void {\n    this.operations_.push(new RenameColumnOperation(cls, oldName, newName));\n  }\n\n  /**\n   * Adds dependency in order, dependency is another migration.\n   * @param dependency Previous version migration.\n   */\n  addDependency(dependency: Migration): void {\n    this.dependencies_.push(dependency);\n  }\n\n  /**\n   * Use dependency array as dependencies.\n   * @param dependencies All previous migrations.\n   */\n  setDependencies(dependencies: Migration[]): void {\n    this.dependencies_ = dependencies;\n  }\n\n  /**\n   * Generates SQL to migrate.\n   * @returns {string} SQL.\n   */\n  preview(): string {\n    let sql: string = '';\n\n    for (let i = 0; i < this.operations_.length; i++) {\n      let operation: Operation = this.operations_[i];\n      sql += operation.sql();\n\n      if (i !== this.operations_.length - 1) {\n        sql += '\\n';\n      }\n    }\n\n    return sql;\n  }\n\n  save(path: string = 'sql/migration.sql'): void {\n    const sql: string = this.preview();\n    fs.writeFile(path, sql);\n\n  }\n\n\n  /**\n   * Executes migrate sql commands, it is highly recommended to use preview() to see sql before use this method.\n   */\n  migrate(setupEnv: boolean = false): void {\n    let pgClient: PgClient = undefined;\n\n    if (PgClient.getInstance()) {\n      pgClient = PgClient.getInstance();\n    } else {\n      throw new Error('UNDEFINED_PG_CLIENT_SHARED_INSTANCE');\n    }\n\n    // run dependencies\n    for (let dependency of this.dependencies_) {\n      dependency.migrate();\n    }\n\n    // run operations\n    let sqls: Array<string> = [];\n\n    // create necessary functions\n    if (setupEnv) {\n      let setupEnvSql: string = fs.readFileSync(path.resolve('sql/setup_pg.sql'), 'utf8') + '\\n';\n      sqls.push(setupEnvSql);\n    }\n\n    for (let operation of this.operations_) {\n      sqls.push(operation.sql());\n    }\n\n    pgClient.queryInTransaction(sqls);\n  }\n}\n"]}