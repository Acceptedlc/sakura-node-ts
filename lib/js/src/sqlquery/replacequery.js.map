{"version":3,"sources":["../src/sqlquery/replacequery.ts"],"names":[],"mappings":";AAGA,6BAAyB,oBAAoB,CAAC,CAAA;AAE9C,2BAAuB,YAAY,CAAC,CAAA;AASpC;IAAA;QAGU,eAAU,GAAkD,EAAE,CAAC;IA0CzE,CAAC;IAxCC,SAAS,CAAC,GAAa;QACrB,IAAI,KAAK,GAAW,uBAAU,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;QACrD,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACtB,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,GAAG,IAAW;QAClB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACjC,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,GAAG,CAAC,GAAW,EAAE,KAAU,EAAE,OAAgB;QAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAC,CAAC,CAAC;QACjE,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,KAAK;QACH,IAAI,OAAO,GAAa,EAAE,CAAC;QAC3B,IAAI,SAAS,GAAU,EAAE,CAAC;QAC1B,IAAI,MAAM,GAAU,EAAE,CAAC;QAEvB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,EAAE;YACzB,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;YAErB,IAAI,KAAK,GAAW,mBAAQ,CAAC,mBAAmB,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC;YACvE,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACtB,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,KAAK,EAAE,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAI,IAAI,GAAW,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrC,IAAI,MAAM,GAAW,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACzC,IAAI,GAAG,GAAW,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEnC,MAAM,CAAC,UAAU,IAAI,CAAC,MAAM,QAAQ,GAAG,UAAU,IAAI,CAAC,MAAM;0BACtC,IAAI,CAAC,MAAM,KAAK,IAAI;qBACzB,MAAM;8CACmB,IAAI,CAAC,MAAM,UAAU,IAAI,CAAC,MAAM,IAAI,CAAC;IACjF,CAAC;AACH,CAAC;AA7CY,oBAAY,eA6CxB,CAAA","file":"replacequery.js","sourcesContent":["// Copyright 2016 Frank Lin (lin.xiaoe.f@gmail.com). All rights reserved.\n// Use of this source code is governed a license that can be found in the LICENSE file.\n\nimport {sqlContext} from '../util/sqlcontext';\nimport {SqlType} from '../base/model';\nimport {SqlQuery} from './sqlquery';\n\n/**\n * Insert or replace.\n *\n * Usage:\n *  const sql: string = new ReplaceQuery().fromClass(WeatherCacheInfo).where('xx=xx').set(x, y).set(z, c).build();\n *  PgClient.getInstance().query(sql);\n */\nexport class ReplaceQuery {\n  private table_: string;\n  private where_: string;\n  private newValues_: {key: string, value: any, sqlType: SqlType}[] = [];\n\n  fromClass(cls: Function): this {\n    let table: string = sqlContext.findTableByClass(cls);\n    if (table) {\n      this.table_ = table;\n    }\n    return this;\n  }\n\n  where(...args: any[]): this {\n    this.where_ = args.join(' AND ');\n    return this;\n  }\n\n  set(key: string, value: any, sqlType: SqlType): this {\n    this.newValues_.push({key: key, value: value, sqlType: sqlType});\n    return this;\n  }\n\n  build(): string {\n    let keysAry: string[] = [];\n    let valuesAry: any[] = [];\n    let kvsAry: any[] = [];\n\n    this.newValues_.forEach((kv) => {\n      keysAry.push(kv.key);\n\n      let value: string = SqlQuery.valueAsStringByType(kv.value, kv.sqlType);\n      valuesAry.push(value);\n      kvsAry.push(`${kv.key}=${value}`);\n    });\n\n    let keys: string = keysAry.join(',');\n    let values: string = valuesAry.join(',');\n    let kvs: string = kvsAry.join(',');\n\n    return `UPDATE ${this.table_} SET ${kvs} WHERE ${this.where_};\n            INSERT INTO ${this.table_} (${keys})\n            SELECT ${values}\n            WHERE NOT EXISTS (SELECT 1 FROM ${this.table_} WHERE ${this.where_});`;\n  }\n}\n"]}