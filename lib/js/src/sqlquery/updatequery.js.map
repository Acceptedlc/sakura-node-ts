{"version":3,"sources":["../src/sqlquery/updatequery.ts"],"names":[],"mappings":";AAGA,6BAAyB,oBAAoB,CAAC,CAAA;AAC9C,wBAAgD,eAAe,CAAC,CAAA;AAChE,gCAA6C,uBAAuB,CAAC,CAAA;AACrE,uBAAqB,MAAM,CAAC,CAAA;AAC5B,uBAAuB,MAAM,CAAC,CAAA;AAkB9B;IAAA;QAGU,aAAQ,GAAgC,EAAE,CAAC;IAuFrD,CAAC;IAlFC,KAAK,CAAC,IAAY;QAChB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,kBAAkB,CAAC,GAAa;QAC9B,IAAI,KAAK,GAAW,uBAAU,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;QACrD,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACtB,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,GAAG,CAAC,GAAW,EAAE,KAAU;QACzB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC;QAC7C,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,SAAS,CAAC,KAAY;QACpB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QAEpB,IAAI,UAAU,GAAa,EAAE,CAAC;QAC9B,MAAM,cAAc,GAAoB,uBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAE1F,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,cAAc,CAAC,CAAC,CAAC;YACpC,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,KAAK,eAAO,CAAC,WAAW,CAAC,CAAC,CAAC;YAE5C,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;gBACzB,IAAI,GAAG,GAAW,QAAQ,CAAC,UAAU,CAAC;gBACtC,IAAI,KAAK,GAAQ,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAC5C,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACV,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,KAAK,eAAO,CAAC,WAAW,IAAI,QAAQ,CAAC,IAAI,KAAK,eAAO,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,KAAK,eAAO,CAAC,YAAY,CAAC,CAAC,CAAC;wBACtH,KAAK,GAAG,IAAI,KAAK,GAAG,CAAC;oBACvB,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,KAAK,eAAO,CAAC,IAAI,CAAC,CAAC,CAAC;wBAC1C,IAAI,gBAAgB,GAAW,6BAAa,CAAC,cAAc,CAAC,KAAK,EAAE,+BAAe,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;wBACxG,KAAK,GAAG,IAAI,gBAAgB,SAAS,CAAC;oBACxC,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,KAAK,eAAO,CAAC,SAAS,CAAC,CAAC,CAAC;wBAC/C,EAAE,CAAC,CAAC,eAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;4BACpB,KAAK,GAAG,gBAAgB,KAAK,GAAG,CAAC;wBACnC,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,aAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;4BACzB,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;4BACvD,KAAK,GAAG,gBAAgB,GAAG,GAAG,CAAC;wBACjC,CAAC;oBACH,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,KAAK,eAAO,CAAC,IAAI,CAAC,CAAC,CAAC;wBAC1C,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;4BAC9B,KAAK,GAAG,GAAG,KAAK,QAAQ,CAAC;wBAC3B,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACN,KAAK,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC;wBAC7C,CAAC;oBACH,CAAC;oBACD,UAAU,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,KAAK,EAAE,CAAC,CAAC;gBACrC,CAAC;YACH,CAAC;QACH,CAAC;QAED,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,sBAAsB,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACnD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,GAAG,IAAW;QAClB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACjC,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,KAAK;QACH,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAChB,MAAM,CAAC,UAAU,IAAI,CAAC,MAAM,QAAQ,IAAI,CAAC,sBAAsB,UAAU,IAAI,CAAC,MAAM,GAAG,CAAC;QAC1F,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,UAAU,GAAa,EAAE,CAAC;YAC9B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,MAAiC;gBACtD,EAAE,CAAC,CAAC,OAAM,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACtC,UAAU,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,GAAG,KAAK,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC;gBACrD,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,UAAU,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;gBACnD,CAAC;YACH,CAAC,CAAC,CAAC;YAEH,MAAM,OAAO,GAAW,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,UAAU,IAAI,CAAC,MAAM,QAAQ,OAAO,UAAU,IAAI,CAAC,MAAM,GAAG,CAAC;QACtE,CAAC;IACH,CAAC;AACH,CAAC;AA1FY,mBAAW,cA0FvB,CAAA","file":"updatequery.js","sourcesContent":["// Copyright 2016 Frank Lin (lin.xiaoe.f@gmail.com). All rights reserved.\n// Use of this source code is governed a license that can be found in the LICENSE file.\n\nimport {sqlContext} from '../util/sqlcontext';\nimport {Model, SqlField, SqlFlag, SqlType} from '../base/model';\nimport {DateFormatter, DateFormtOption} from '../util/dateformatter';\nimport {isDate} from 'util';\nimport {isNumber} from 'util';\n\n/**\n * Update query.\n *\n * Usage:\n *  1) build from raw\n *  let query: UpdateQuery = new UpdateQuery();\n *  query.tableNameFromClass(cls).set('kind', 'Dramatic').where(`kind='Drama'`);\n *\n *  The above will be 'UPDATE films SET kind = 'Dramatic' WHERE kind = 'Drama';'\n *\n *  2) build from model\n *  let query: UpdateQuery = new UpdateQuery();\n *  query.fromModel(modelInstance).where('uid=19900106').build();\n *\n *  The above will read table name and key-values from model.\n */\nexport class UpdateQuery {\n  private table_: string;\n  private where_: string;\n  private updates_: {key: string, value: any}[] = [];\n\n  private model_: Model;\n  private setValuesSqlFromModel_: string;\n\n  table(name: string): this {\n    this.table_ = name;\n    return this;\n  }\n\n  tableNameFromClass(cls: Function): this {\n    let table: string = sqlContext.findTableByClass(cls);\n    if (table) {\n      this.table_ = table;\n    }\n    return this;\n  }\n\n  set(key: string, value: any): this {\n    this.updates_.push({key: key, value: value});\n    return this;\n  }\n\n  fromModel(model: Model): this {\n    this.model_ = model;\n\n    let updatesAry: string[] = [];\n    const sqlDefinitions: Array<SqlField> = sqlContext.findSqlFields(this.model_.constructor);\n\n    for (let sqlField of sqlDefinitions) {\n      if (sqlField.flag === SqlFlag.PRIMARY_KEY) {\n        // default ignore primary key to keys array\n      } else if (sqlField.name) {\n        let key: string = sqlField.columnName;\n        let value: any = this.model_[sqlField.name];\n        if (value) {\n          if (sqlField.type === SqlType.VARCHAR_255 || sqlField.type === SqlType.TEXT || sqlField.type === SqlType.VARCHAR_1024) {\n            value = `'${value}'`;\n          } else if (sqlField.type === SqlType.DATE) {\n            let valueAsDateInSql: string = DateFormatter.stringFromDate(value, DateFormtOption.YEAR_MONTH_DAY, '-');\n            value = `'${valueAsDateInSql}'::date`;\n          } else if (sqlField.type === SqlType.TIMESTAMP) {\n            if (isNumber(value)) {\n              value = `to_timestamp(${value})`;\n            } else if (isDate(value)) {\n              let tmp = Math.floor(new Date(value).getTime() / 1000);\n              value = `to_timestamp(${tmp})`;\n            }\n          } else if (sqlField.type === SqlType.JSON) {\n            if (typeof value === 'string') {\n              value = `${value}::json`;\n            } else {\n              value = `'${JSON.stringify(value)}'::json`;\n            }\n          }\n          updatesAry.push(`${key}=${value}`);\n        }\n      }\n    }\n\n    this.tableNameFromClass(this.model_.constructor);\n    this.setValuesSqlFromModel_ = updatesAry.join(',');\n    return this;\n  }\n\n  where(...args: any[]): this {\n    this.where_ = args.join(' AND ');\n    return this;\n  }\n\n  build(): string {\n    if (this.model_) {\n      return `UPDATE ${this.table_} SET ${this.setValuesSqlFromModel_} WHERE ${this.where_};`;\n    } else {\n      let updatesAry: string[] = [];\n      this.updates_.forEach((update: {key: string, value: any}) => {\n        if (typeof(update.value) === 'string') {\n          updatesAry.push(`${update.key}='${update.value}'`);\n        } else {\n          updatesAry.push(`${update.key}=${update.value}`);\n        }\n      });\n\n      const updates: string = updatesAry.join(',');\n      return `UPDATE ${this.table_} SET ${updates} WHERE ${this.where_};`;\n    }\n  }\n}\n"]}