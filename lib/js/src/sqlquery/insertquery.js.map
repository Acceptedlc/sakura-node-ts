{"version":3,"sources":["../src/sqlquery/insertquery.ts"],"names":[],"mappings":";AAIA,6BAAyB,oBAAoB,CAAC,CAAA;AAC9C,2BAAqC,YAAY,CAAC,CAAA;AAKlD;IAAA;QAEU,cAAS,GAAY,IAAI,CAAC;IAiCpC,CAAC;IA/BC,SAAS,CAAC,KAAY;QACpB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,QAAQ,CAAC,CAAU;QACjB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACnB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,KAAK;QACH,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAChB,IAAI,YAAY,GAAiB,mBAAQ,CAAC,wBAAwB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAEhF,IAAI,UAAU,GAAW,YAAY,CAAC,UAAU,CAAC;YACjD,IAAI,IAAI,GAAkB,YAAY,CAAC,IAAI,CAAC;YAC5C,IAAI,MAAM,GAAkB,YAAY,CAAC,MAAM,CAAC;YAEhD,MAAM,OAAO,GAAW,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACvC,MAAM,SAAS,GAAW,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAE3C,MAAM,SAAS,GAAW,uBAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YAE/E,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,UAAU,CAAC,CAAC,CAAC;gBACjC,MAAM,CAAC,eAAe,SAAS,KAAK,OAAO,aAAa,SAAS,eAAe,UAAU,EAAE,CAAC;YAC/F,CAAC;YAED,MAAM,CAAC,eAAe,SAAS,KAAK,OAAO,aAAa,SAAS,GAAG,CAAC;QACvE,CAAC;QACD,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;AACH,CAAC;AAnCY,mBAAW,cAmCvB,CAAA","file":"insertquery.js","sourcesContent":["// Copyright 2016 Frank Lin (lin.xiaoe.f@gmail.com). All rights reserved.\n// Use of this source code is governed a license that can be found in the LICENSE file.\n\nimport {Model} from '../base/model';\nimport {sqlContext} from '../util/sqlcontext';\nimport {ModelSqlInfo, SqlQuery} from './sqlquery';\n\n/**\n * Builds insert sql query.\n */\nexport class InsertQuery {\n  private model_: Model;\n  private returnId_: boolean = true;\n\n  fromModel(model: Model): this {\n    this.model_ = model;\n    return this;\n  }\n\n  returnId(b: boolean): this {\n    this.returnId_ = b;\n    return this;\n  }\n\n  build(): string {\n    if (this.model_) {\n      let modelSqlInfo: ModelSqlInfo = SqlQuery.getSqlInfoFromDefinition(this.model_);\n\n      let primaryKey: string = modelSqlInfo.primaryKey;\n      let keys: Array<string> = modelSqlInfo.keys;\n      let values: Array<string> = modelSqlInfo.values;\n\n      const keysStr: string = keys.join(',');\n      const valuesStr: string = values.join(',');\n\n      const tableName: string = sqlContext.findTableByClass(this.model_.constructor);\n\n      if (this.returnId_ && primaryKey) {\n        return `INSERT INTO ${tableName} (${keysStr}) VALUES (${valuesStr}) RETURNING ${primaryKey}`;\n      }\n\n      return `INSERT INTO ${tableName} (${keysStr}) VALUES (${valuesStr})`;\n    }\n    return '';\n  }\n}\n"]}