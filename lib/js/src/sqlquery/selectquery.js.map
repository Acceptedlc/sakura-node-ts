{"version":3,"sources":["../src/sqlquery/selectquery.ts"],"names":[],"mappings":";AAIA,6BAAyB,oBAAoB,CAAC,CAAA;AAM9C;IAAA;QAIU,cAAS,GAA0C,EAAE,CAAC;QAGtD,gBAAW,GAAa,EAAE,CAAC;IA8FrC,CAAC;IA5FC,IAAI,CAAC,KAAa;QAChB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,SAAS,CAAC,GAAa;QACrB,IAAI,KAAK,GAAW,uBAAU,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;QACrD,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACtB,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,SAAS,CAAC,KAAa;QACrB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,SAAS,CAAC,QAAgB;QACxB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAChC,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,MAAM,CAAC,MAAM,GAAa,EAAE;QAC1B,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;QAC5B,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,GAAG,IAAW;QAClB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACjC,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,OAAO,CAAC,IAAY,EAAE,KAAK,GAAmB,KAAK;QACjD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC;QAChD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,QAAQ,CAAC,KAAa;QACpB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,SAAS,CAAC,MAAc;QACtB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,KAAK;QACH,IAAI,MAAM,GAAW,GAAG,CAAC;QACzB,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACxC,CAAC;QAED,IAAI,GAAG,GAAW,UAAU,MAAM,SAAS,IAAI,CAAC,MAAM,EAAE,CAAC;QAGzD,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAChC,GAAG,CAAC,CAAC,IAAI,SAAS,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBACvC,GAAG,GAAG,GAAG,GAAG,IAAI,SAAS,GAAG,CAAC;YAC/B,CAAC;QACH,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAChB,GAAG,GAAG,GAAG,GAAG,UAAU,IAAI,CAAC,MAAM,EAAE,CAAC;QACtC,CAAC;QAGD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,WAAW,GAAkB,EAAE,CAAC;YACpC,GAAG,CAAC,CAAC,IAAI,OAAO,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACnC,WAAW,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;YACvD,CAAC;YACD,IAAI,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACvC,GAAG,GAAG,GAAG,GAAG,aAAa,UAAU,EAAE,CAAC;QACxC,CAAC;QAGD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAChB,GAAG,GAAG,GAAG,GAAG,UAAU,IAAI,CAAC,MAAM,EAAE,CAAC;QACtC,CAAC;QAGD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;gBACtB,GAAG,GAAG,GAAG,GAAG,WAAW,IAAI,CAAC,OAAO,EAAE,CAAC;YACxC,CAAC;QAEH,CAAC;QAED,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;AACH,CAAC;AArGY,mBAAW,cAqGvB,CAAA","file":"selectquery.js","sourcesContent":["// Copyright 2016 Frank Lin (lin.xiaoe.f@gmail.com). All rights reserved.\n// Use of this source code is governed a license that can be found in the LICENSE file.\n\nimport {SqlField, SqlFlag, Model} from '../base/model';\nimport {sqlContext} from '../util/sqlcontext';\n\n\n/**\n * Builds select sql query.\n */\nexport class SelectQuery {\n  private table_: string;\n  private where_: string;\n  private selectFields_: string[];\n  private orderBys_: {sort: string, order: 'ASC'|'DESC'}[] = [];\n  private limit_: number;\n  private offset_: number;\n  private joinUsings_: string[] = [];\n\n  from(table: string): this {\n    this.table_ = table;\n    return this;\n  }\n\n  fromClass(cls: Function): this {\n    let table: string = sqlContext.findTableByClass(cls);\n    if (table) {\n      this.table_ = table;\n    }\n    return this;\n  }\n\n  fromTable(table: string): this {\n    this.table_ = table;\n    return this;\n  }\n\n  joinUsing(joninStr: string): this {\n    this.joinUsings_.push(joninStr);\n    return this;\n  }\n\n  select(fields: string[] = []): this {\n    this.selectFields_ = fields;\n    return this;\n  }\n\n  where(...args: any[]): this {\n    this.where_ = args.join(' AND ');\n    return this;\n  }\n\n  orderBy(sort: string, order: 'ASC' | 'DESC' = 'ASC'): this {\n    this.orderBys_.push({sort: sort, order: order});\n    return this;\n  }\n\n  setLimit(limit: number): this {\n    this.limit_ = limit;\n    return this;\n  }\n\n  setOffset(offset: number): this {\n    this.offset_ = offset;\n    return this;\n  }\n\n  build(): string {\n    let fields: string = '*';\n    if (this.selectFields_.length > 0) {\n      fields = this.selectFields_.join(',');\n    }\n\n    let sql: string = `SELECT ${fields} FROM ${this.table_}`;\n\n    // join tableName using(column)\n    if (this.joinUsings_.length > 0) {\n      for (let joinUsing of this.joinUsings_) {\n        sql = `${sql} ${joinUsing} `;\n      }\n    }\n    // WHERE\n    if (this.where_) {\n      sql = `${sql} WHERE ${this.where_}`;\n    }\n\n    // ORDER BY\n    if (this.orderBys_.length > 0) {\n      let orderBySqls: Array<string> = [];\n      for (let orderBy of this.orderBys_) {\n        orderBySqls.push(`${orderBy.sort} ${orderBy.order}`);\n      }\n      let orderBySql = orderBySqls.join(',');\n      sql = `${sql} ORDER BY ${orderBySql}`;\n    }\n\n    // LIMIT\n    if (this.limit_) {\n      sql = `${sql} LIMIT ${this.limit_}`;\n    }\n\n    // OFFSET\n    if (this.offset_) {\n      if (this.offset_ >= 0) {\n        sql = `${sql} OFFSET ${this.offset_}`;\n      }\n\n    }\n\n    return sql;\n  }\n}\n"]}