{"version":3,"sources":["../src/sqlquery/sqlquery.ts"],"names":[],"mappings":";AAGA,wBAAgD,eAAe,CAAC,CAAA;AAChE,6BAAyB,oBAAoB,CAAC,CAAA;AAC9C,gCAA6C,uBAAuB,CAAC,CAAA;AAWrE;IAOE,OAAO,wBAAwB,CAAC,KAAY;QAC1C,IAAI,SAAS,GAAiB,EAAC,UAAU,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAC,CAAC;QAErE,MAAM,cAAc,GAAoB,uBAAU,CAAC,aAAa,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAEpF,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,cAAc,CAAC,CAAC,CAAC;YACpC,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,KAAK,eAAO,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC1C,SAAS,CAAC,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;YAC7C,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;gBACzB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;gBACzC,IAAI,KAAK,GAAQ,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACtC,KAAK,GAAG,QAAQ,CAAC,mBAAmB,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAC3D,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC/B,CAAC;QACH,CAAC;QAED,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAED,OAAO,mBAAmB,CAAC,KAAU,EAAE,OAAgB;QACrD,EAAE,CAAC,CAAC,OAAO,KAAK,eAAO,CAAC,OAAO,IAAI,OAAO,KAAK,eAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAC5D,KAAK,GAAG,IAAI,KAAK,GAAG,CAAC;QACvB,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,KAAK,eAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YACpC,IAAI,gBAAgB,GAAW,6BAAa,CAAC,cAAc,CAAC,KAAK,EAAE,+BAAe,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;YACxG,KAAK,GAAG,IAAI,gBAAgB,SAAS,CAAC;QACxC,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,KAAK,eAAO,CAAC,SAAS,CAAC,CAAC,CAAC;YACzC,KAAK,GAAG,gBAAgB,KAAK,GAAG,CAAC;QACnC,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,KAAK,eAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YACpC,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC9B,KAAK,GAAG,IAAI,KAAK,SAAS,CAAC;YAC7B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,KAAK,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC;YAC7C,CAAC;QACH,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;AACH,CAAC;AA3CY,gBAAQ,WA2CpB,CAAA","file":"sqlquery.js","sourcesContent":["// Copyright 2016 Frank Lin (lin.xiaoe.f@gmail.com). All rights reserved.\n// Use of this source code is governed a license that can be found in the LICENSE file.\n\nimport {Model, SqlField, SqlType, SqlFlag} from \"../base/model\";\nimport {sqlContext} from \"../util/sqlcontext\";\nimport {DateFormatter, DateFormtOption} from \"../util/dateformatter\";\n\nexport interface ModelSqlInfo {\n  primaryKey: string;\n  keys: Array<string>;\n  values: Array<string>;\n}\n\n/**\n * Including some utility methods for xxxQuery class.\n */\nexport class SqlQuery {\n\n  /**\n   * Gets model sql definition infos.\n   * @param model Model object.\n   * @returns {ModelSqlInfo} Result information.\n   */\n  static getSqlInfoFromDefinition(model: Model): ModelSqlInfo {\n    let modelInfo: ModelSqlInfo = {primaryKey: '', keys: [], values: []};\n\n    const sqlDefinitions: Array<SqlField> = sqlContext.findSqlFields(model.constructor);\n\n    for (let sqlField of sqlDefinitions) {\n      if (sqlField.flag === SqlFlag.PRIMARY_KEY) {\n        modelInfo.primaryKey = sqlField.columnName; // default not pushes primary key to keys array\n      } else if (sqlField.name) {\n        modelInfo.keys.push(sqlField.columnName);\n        let value: any = model[sqlField.name];\n        value = SqlQuery.valueAsStringByType(value, sqlField.type);\n        modelInfo.values.push(value);\n      }\n    }\n\n    return modelInfo;\n  }\n\n  static valueAsStringByType(value: any, sqlType: SqlType): string {\n    if (sqlType === SqlType.VARCHAR || sqlType === SqlType.TEXT) {\n      value = `'${value}'`;\n    } else if (sqlType === SqlType.DATE) {\n      let valueAsDateInSql: string = DateFormatter.stringFromDate(value, DateFormtOption.YEAR_MONTH_DAY, '-');\n      value = `'${valueAsDateInSql}'::date`;\n    } else if (sqlType === SqlType.TIMESTAMP) {\n      value = `to_timestamp(${value})`;\n    } else if (sqlType === SqlType.JSON) {\n      if (typeof value === 'string') {\n        value = `'${value}'::json`;\n      } else {\n        value = `'${JSON.stringify(value)}'::json`;\n      }\n    }\n    return value;\n  }\n}\n"]}