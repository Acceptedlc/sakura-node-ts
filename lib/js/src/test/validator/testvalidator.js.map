{"version":3,"sources":["../src/test/validator/testvalidator.ts"],"names":[],"mappings":"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","file":"testvalidator.js","sourcesContent":["// Copyright 2016 huteng (hutengf@gagogroup.com). All rights reserved.,\n// Use of this source code is governed a license that can be found in the LICENSE file.\n\nimport * as chai from 'chai';\n\nimport {Validator} from '../../api/validator';\n\ndescribe('validator test', () => {\n  it('test turn a string into number array', () => {\n    let str: string = '[1,2,3]';\n    let validator = new Validator();\n    let numArr = validator.toNumberArray(str, 'invalid parm');\n    chai.expect(numArr[0]).to.be.equal(1);\n    chai.expect(numArr[1]).to.be.equal(2);\n    chai.expect(numArr[2]).to.be.equal(3);\n    let errOrNot: boolean =  validator.hasErrors();\n    chai.expect(errOrNot).to.be.equal(false);\n  });\n\n  it('parm is null', () => {\n    let str: string = null;\n    let validator = new Validator();\n    let numArr = validator.toNumberArray(str, 'invalid parm');\n    chai.expect(validator.errors[0].reason).to.be.equal('invalid parm');\n  });\n\n  it('string is []', () => {\n    let str: string = '[]';\n    let validator = new Validator();\n    let numArr = validator.toNumberArray(str, 'invalid parm');\n    chai.expect(validator.errors[0].reason).to.be.equal('invalid parm');\n  });\n\n  it(`string is '[1,2'`, () => {\n    let str: string = '[1,2';\n    let validator = new Validator();\n    let numArr = validator.toNumberArray(str, 'invalid parm');\n    chai.expect(validator.errors[0].reason).to.be.equal('invalid parm');\n  });\n\n  it(`string is '1,2]'`, () => {\n    let str: string = '1,2]';\n    let validator = new Validator();\n    let numArr = validator.toNumberArray(str, 'invalid parm');\n    chai.expect(validator.errors[0].reason).to.be.equal('invalid parm');\n  });\n\n  it(`string is '1,2'`, () => {\n    let str: string = '1,2';\n    let validator = new Validator();\n    let numArr = validator.toNumberArray(str, 'invalid parm');\n    chai.expect(validator.errors[0].reason).to.be.equal('invalid parm');\n  });\n\n  it(`string is '[1,a]'`, () => {\n    let str: string = '[1,a]';\n    let validator = new Validator();\n    let numArr = validator.toNumberArray(str, 'invalid parm');\n    chai.expect(validator.errors[0].reason).to.be.equal('invalid parm');\n  });\n\n  it(`string is '[1, 2]'`, () => {\n    let str: string = '[1, 2]';\n    let validator = new Validator();\n    let numArr = validator.toNumberArray(str, 'invalid parm');\n    chai.expect(numArr[0]).to.be.equal(1);\n    chai.expect(numArr[1]).to.be.equal(2);\n  });\n});"]}