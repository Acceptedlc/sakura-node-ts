{"version":3,"sources":["../src/test/tools/testgeneratesql.ts"],"names":[],"mappings":";;;;;;;AAGA,MAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAE7B,4BAAgC,sBAAsB,CAAC,CAAA;AACvD,wBAAuD,kBAAkB,CAAC,CAAA;AAC1E,+BAA2B,0BAA0B,CAAC,CAAA;AAGtD,8BAAmB,aAAK;AAkBxB,CAAC;AAjBC;IAAC,kBAAM,CAAC,KAAK,EAAE,eAAO,CAAC,GAAG,EAAE,eAAO,CAAC,WAAW,EAAE,WAAW,EAAE,uBAAe,CAAC,cAAc,EAAE,CAAC;iCAAA;AAG/F;IAAC,kBAAM,CAAC,UAAU,EAAE,eAAO,CAAC,WAAW,EAAE,eAAO,CAAC,QAAQ,CAAC;sCAAA;AAG1D;IAAC,kBAAM,CAAC,cAAc,EAAE,eAAO,CAAC,WAAW,EAAE,eAAO,CAAC,QAAQ,CAAC;yCAAA;AAG9D;IAAC,kBAAM,CAAC,MAAM,EAAE,eAAO,CAAC,IAAI,EAAE,eAAO,CAAC,QAAQ,CAAC;kCAAA;AAG/C;IAAC,kBAAM,CAAC,YAAY,EAAE,eAAO,CAAC,SAAS,EAAE,eAAO,CAAC,QAAQ,CAAC;uCAAA;AAG1D;IAAC,kBAAM,CAAC,YAAY,EAAE,eAAO,CAAC,SAAS,EAAE,eAAO,CAAC,QAAQ,CAAC;uCAAA;AAjB5D;IAAC,qBAAS,CAAC,OAAO,CAAC;QAAA;AAsBnB,0CAAyB,aAAK;AAM9B,CAAC;AALC;IAAC,kBAAM,CAAC,KAAK,EAAE,eAAO,CAAC,GAAG,EAAE,eAAO,CAAC,WAAW,EAAE,WAAW,EAAE,uBAAe,CAAC,MAAM,EAAE,CAAC;uCAAA;AAGvF;IAAC,kBAAM,CAAC,MAAM,EAAE,eAAO,CAAC,WAAW,EAAE,eAAO,CAAC,QAAQ,EAAE,KAAK,CAAC;wCAAA;AAL/D;IAAC,qBAAS,CAAC,aAAa,CAAC;cAAA;AASzB,QAAQ,CAAC,cAAc,EAAE;IAEvB,EAAE,CAAC,+CAA+C,EAAE;QAClD,MAAM,YAAY,GAAW;;;;;;;GAO9B,CAAC;QAEA,MAAM,GAAG,GAAW,2BAAY,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;QAC9D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2DAA2D,EAAE;QAC9D,MAAM,YAAY,GAAW;;;GAG9B,CAAC;QAEA,MAAM,GAAG,GAAW,2BAAY,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;QACpE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"testgeneratesql.js","sourcesContent":["// Copyright 2016 Frank Lin (lin.xiaoe.f@gmail.com). All rights reserved.\n// Use of this source code is governed a license that can be found in the LICENSE file.\n\nimport * as chai from 'chai';\n\nimport {TableName, Column} from '../../base/decorator';\nimport {Model, SqlType, SqlFlag, SqlDefaultValue} from '../../base/model';\nimport {sqlGenerator} from '../../tools/sqlgenerator';\n\n@TableName('users')\nclass User extends Model {\n  @Column('uid', SqlType.INT, SqlFlag.PRIMARY_KEY, '系统编号，唯一标识', SqlDefaultValue.MAKE_RANDOM_ID())\n  uid: number;\n\n  @Column('username', SqlType.VARCHAR_255, SqlFlag.NOT_NULL)\n  username: string;\n\n  @Column('display_name', SqlType.VARCHAR_255, SqlFlag.NULLABLE)\n  displayName: string;\n\n  @Column('meta', SqlType.JSON, SqlFlag.NULLABLE)\n  meta: any;\n\n  @Column('created_at', SqlType.TIMESTAMP, SqlFlag.NULLABLE)\n  createdAt: Date;\n\n  @Column('updated_at', SqlType.TIMESTAMP, SqlFlag.NULLABLE)\n  updatedAt: number;\n}\n\n@TableName('enterprises')\nclass Enterprise extends Model {\n  @Column('eid', SqlType.INT, SqlFlag.PRIMARY_KEY, '系统编号，唯一标识', SqlDefaultValue.SERIAL())\n  eid: number;\n\n  @Column('name', SqlType.VARCHAR_255, SqlFlag.NOT_NULL, '企业名')\n  name: string;\n}\n\ndescribe('SqlGenerator', () => {\n\n  it('Test generateCreateTableSql with normal model', () => {\n    const expectResult: string = `CREATE TABLE users (\nuid INTEGER PRIMARY KEY DEFAULT make_random_id(), --系统编号，唯一标识\nusername VARCHAR(255),\ndisplay_name VARCHAR(255),\nmeta JSON,\ncreated_at TIMESTAMP,\nupdated_at TIMESTAMP\n);`;\n\n    const sql: string = sqlGenerator.generateCreateTableSql(User);\n    chai.expect(sql).to.equal(expectResult);\n  });\n\n  it('Test generateCreateTableSql with model whose ID is SERIAL', () => {\n    const expectResult: string = `CREATE TABLE enterprises (\neid SERIAL, --系统编号，唯一标识\nname VARCHAR(255) --企业名\n);`;\n\n    const sql: string = sqlGenerator.generateCreateTableSql(Enterprise);\n    chai.expect(sql).to.equal(expectResult);\n  });\n});\n"]}