{"version":3,"sources":["../src/test/sqlquery/testselectquery.ts"],"names":[],"mappings":";;;;;;;AAGA,MAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAE7B,8BAA0B,4BAA4B,CAAC,CAAA;AACvD,4BAAgC,sBAAsB,CAAC,CAAA;AACvD,wBAAsC,kBAAkB,CAAC,CAAA;AAIzD,8BAAmB,aAAK;AAkBxB,CAAC;AAjBC;IAAC,kBAAM,CAAC,KAAK,EAAE,eAAO,CAAC,GAAG,EAAE,eAAO,CAAC,WAAW,CAAC;iCAAA;AAGhD;IAAC,kBAAM,CAAC,UAAU,EAAE,eAAO,CAAC,WAAW,EAAE,eAAO,CAAC,QAAQ,CAAC;sCAAA;AAG1D;IAAC,kBAAM,CAAC,cAAc,EAAE,eAAO,CAAC,WAAW,EAAE,eAAO,CAAC,QAAQ,CAAC;yCAAA;AAG9D;IAAC,kBAAM,CAAC,MAAM,EAAE,eAAO,CAAC,IAAI,EAAE,eAAO,CAAC,QAAQ,CAAC;kCAAA;AAG/C;IAAC,kBAAM,CAAC,YAAY,EAAE,eAAO,CAAC,SAAS,EAAE,eAAO,CAAC,QAAQ,CAAC;uCAAA;AAG1D;IAAC,kBAAM,CAAC,YAAY,EAAE,eAAO,CAAC,SAAS,EAAE,eAAO,CAAC,QAAQ,CAAC;uCAAA;AAjB5D;IAAC,qBAAS,CAAC,OAAO,CAAC;QAAA;AAqBnB,QAAQ,CAAC,aAAa,EAAE;IAEtB,EAAE,CAAC,0BAA0B,EAAE;QAE7B,MAAM,GAAG,GAAW,IAAI,yBAAW,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,0CAA0C,CAAC;aAC9D,SAAS,CAAC,uCAAuC,CAAC,CAAC,KAAK,CAAC,gCAAgC,SAAS,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC;QACpK,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,mJAAmJ,CAAC,CAAC;IACjL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE;QAE7B,MAAM,GAAG,GAAW,IAAI,yBAAW,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,gBAAgB,EAAE,2BAA2B,CAAC,CAAC,CAAC,SAAS,CAAC,0CAA0C,CAAC;aAChK,SAAS,CAAC,uCAAuC,CAAC,CAAC,KAAK,CAAC,gCAAgC,SAAS,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC;QACjH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,0LAA0L,CAAC,CAAC;IACxN,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,eAAe,EAAE;QAClB,MAAM,GAAG,GAAW,IAAI,yBAAW,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;QACpF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","file":"testselectquery.js","sourcesContent":["// Copyright 2016 Frank Lin (lin.xiaoe.f@gmail.com). All rights reserved.\n// Use of this source code is governed a license that can be found in the LICENSE file.\n\nimport * as chai from 'chai';\n\nimport {SelectQuery} from '../../sqlquery/selectquery';\nimport {TableName, Column} from '../../base/decorator';\nimport {Model, SqlFlag, SqlType} from '../../base/model';\n\n\n@TableName('users')\nclass User extends Model {\n  @Column('uid', SqlType.INT, SqlFlag.PRIMARY_KEY)\n  uid: number;\n\n  @Column('username', SqlType.VARCHAR_255, SqlFlag.NOT_NULL)\n  username: string;\n\n  @Column('display_name', SqlType.VARCHAR_255, SqlFlag.NULLABLE)\n  displayName: string;\n\n  @Column('meta', SqlType.JSON, SqlFlag.NULLABLE)\n  meta: any;\n\n  @Column('created_at', SqlType.TIMESTAMP, SqlFlag.NULLABLE)\n  createdAt: Date;\n\n  @Column('updated_at', SqlType.TIMESTAMP, SqlFlag.NULLABLE)\n  updatedAt: number;\n}\n\ndescribe('SelectQuery', () => {\n\n  it('查询语句 添加JOIN USING 查询全部属性', () => {\n\n    const sql: string = new SelectQuery().fromClass(User).select().joinUsing(`join enterprise_relationships using(uid)`)\n                                                         .joinUsing(`join enterprises using(enterprise_id)`).where(` enterprises.enterprise_id = ${115237134}`).build();\n    chai.expect(sql).to.equal(`SELECT * FROM users join enterprise_relationships using(uid)  join enterprises using(enterprise_id)  WHERE  enterprises.enterprise_id = 115237134`);\n  });\n\n  it('查询语句 添加JOIN USING 查询部分属性', () => {\n\n    const sql: string = new SelectQuery().fromClass(User).select(['users.username', 'enterprises.enterprise_id']).joinUsing(`join enterprise_relationships using(uid)`)\n      .joinUsing(`join enterprises using(enterprise_id)`).where(` enterprises.enterprise_id = ${115237134}`).build();\n    chai.expect(sql).to.equal(`SELECT users.username,enterprises.enterprise_id FROM users join enterprise_relationships using(uid)  join enterprises using(enterprise_id)  WHERE  enterprises.enterprise_id = 115237134`);\n  });\n\n  it('查询语句 添加OFFSET', () => {\n    const sql: string = new SelectQuery().fromClass(User).select().setOffset(1).build();\n    chai.expect(sql).to.equal(`SELECT * FROM users OFFSET 1`);\n  });\n\n});\n\n"]}