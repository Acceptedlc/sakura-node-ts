{"version":3,"sources":["../src/test/sqlquery/testselectquery.ts"],"names":[],"mappings":";;;;;;;AAEA,MAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAE7B,8BAA4B,4BAA4B,CAAC,CAAA;AACzD,wBAAsC,kBAAkB,CAAC,CAAA;AACzD,4BAAgC,sBAAsB,CAAC,CAAA;AAGvD,8BAAmB,aAAK;IAQtB,MAAM,CAAC,EAAU;QACf,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;IAEhB,CAAC;AACH,CAAC;AAVC;IAAC,kBAAM,CAAC,KAAK,EAAE,eAAO,CAAC,GAAG,EAAE,eAAO,CAAC,WAAW,CAAC;iCAAA;AAGhD;IAAC,kBAAM,CAAC,UAAU,EAAE,eAAO,CAAC,OAAO,EAAE,eAAO,CAAC,QAAQ,CAAC;sCAAA;AANxD;IAAC,qBAAS,CAAC,OAAO,CAAC;QAAA;AAgBnB,4BAAkB,aAAK;IAQrB,MAAM,CAAC,EAAU;QACf,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;IAEhB,CAAC;AACH,CAAC;AAVC;IAAC,kBAAM,CAAC,KAAK,EAAE,eAAO,CAAC,GAAG,EAAE,eAAO,CAAC,WAAW,CAAC;gCAAA;AAGhD;IAAC,kBAAM,CAAC,UAAU,EAAE,eAAO,CAAC,OAAO,EAAE,eAAO,CAAC,QAAQ,CAAC;qCAAA;AANxD;IAAC,qBAAS,CAAC,MAAM,CAAC;OAAA;AAelB,QAAQ,CAAC,eAAe,EAAE;IACxB,EAAE,CAAC,eAAe,EAAE;QAClB,IAAI,IAAI,GAAS,IAAI,IAAI,EAAE,CAAC;QAC5B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACjB,MAAM,GAAG,GAAW,IAAI,yBAAW,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC;QACzG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,uCAAuC,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,wBAAwB,EAAE;IACjC,EAAE,CAAC,wBAAwB,EAAE;QAC3B,IAAI,GAAG,GAAQ,IAAI,GAAG,EAAE,CAAC;QACzB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAChB,MAAM,GAAG,GAAW,IAAI,yBAAW,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC;QACvG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"testselectquery.js","sourcesContent":["//Copyright (c) 2016 (jw872505975@gmail.com). All rights reserved.\n\nimport * as chai from \"chai\";\n\nimport { SelectQuery } from \"../../sqlquery/selectquery\";\nimport {SqlType, Model, SqlFlag} from \"../../base/model\";\nimport {TableName, Column} from \"../../base/decorator\";\n\n@TableName('users')\nclass User extends Model {\n\n  @Column('uid', SqlType.INT, SqlFlag.PRIMARY_KEY)\n  uid: number;\n\n  @Column('username', SqlType.VARCHAR, SqlFlag.NOT_NULL)\n  username: string;\n\n  initPk(pk: number,  ) {\n    this.uid = pk;\n\n  }\n}\n\n@TableName('cars')\nclass Car extends Model {\n\n  @Column('cid', SqlType.INT, SqlFlag.PRIMARY_KEY)\n  cid: number;\n\n  @Column('username', SqlType.VARCHAR, SqlFlag.NOT_NULL)\n  username: string;\n\n  initPk(pk: number,  ) {\n    this.cid = pk;\n\n  }\n}\n\ndescribe('测试查询语句只添加pk条件', () => {\n  it('测试查询语句只添加pk条件', () => {\n    let user: User = new User();\n    user.initPk(111);\n    const sql: string = new SelectQuery().fromClass(User).select().where(user.findPrimaryKeyWhere()).build();\n    chai.expect(sql).to.equal(`SELECT * FROM users WHERE  uid = 111 `);\n  });\n});\n\ndescribe('测试查询语句添加pk条件和普通where条件', () => {\n  it('测试查询语句添加pk条件和普通where条件', () => {\n    let car: Car = new Car();\n    car.initPk(222);\n    const sql: string = new SelectQuery().fromClass(Car).select().where(car.findPrimaryKeyWhere()).build();\n    chai.expect(sql).to.equal(`SELECT * FROM cars WHERE  cid = 222 `);\n  });\n});"]}