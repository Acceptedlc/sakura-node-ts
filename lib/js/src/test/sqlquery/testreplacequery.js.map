{"version":3,"sources":["../src/test/sqlquery/testreplacequery.ts"],"names":[],"mappings":";;;;;;;AAGA,6BAA6B;AAE7B,8DAAyD;AACzD,4CAAyD;AACzD,oDAAuD;AAIvD,IAAM,gBAAgB,GAAtB,sBAAuB,SAAQ,aAAK;IADpC;;QAaE,SAAI,GAAQ,EAAE,CAAC;IAWjB,CAAC;IANC,IAAI,CAAC,GAAW,EAAE,KAAa,EAAE,IAAS,EAAE,SAAoB;QAC9D,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;CACF,CAAA;AApBC;IADC,kBAAM,CAAC,IAAI,EAAE,eAAO,CAAC,GAAG,EAAE,eAAO,CAAC,WAAW,CAAC;6CAC3B;AAGpB;IADC,kBAAM,CAAC,KAAK,EAAE,eAAO,CAAC,WAAW,EAAE,eAAO,CAAC,QAAQ,CAAC;6CACzC;AAGZ;IADC,kBAAM,CAAC,OAAO,EAAE,eAAO,CAAC,WAAW,EAAE,eAAO,CAAC,QAAQ,CAAC;+CACzC;AAGd;IADC,kBAAM,CAAC,MAAM,EAAE,eAAO,CAAC,IAAI,EAAE,eAAO,CAAC,QAAQ,CAAC;8CAChC;AAGf;IADC,kBAAM,CAAC,YAAY,EAAE,eAAO,CAAC,SAAS,EAAE,eAAO,CAAC,QAAQ,CAAC;mDACrC;AAfjB,gBAAgB;IADrB,qBAAS,CAAC,iBAAiB,CAAC;GACvB,gBAAgB,CAuBrB;AAED,QAAQ,CAAC,cAAc,EAAE;IACvB,EAAE,CAAC,YAAY,EAAE;QACf,IAAI,YAAY,GAAqB,IAAI,gBAAgB,EAAE,CAAC;QAC5D,YAAY,CAAC,IAAI,CAAC,uBAAuB,EAAE,gBAAgB,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC;QAC7E,MAAM,GAAG,GACP,IAAI,2BAAY,EAAE;aACf,SAAS,CAAC,gBAAgB,CAAC;aAC3B,KAAK,CAAC,QAAQ,YAAY,CAAC,GAAG,GAAG,EAAE,UAAU,YAAY,CAAC,KAAK,GAAG,CAAC;aACnE,GAAG,CAAC,KAAK,EAAE,YAAY,CAAC,GAAG,EAAE,eAAO,CAAC,WAAW,CAAC;aACjD,GAAG,CAAC,OAAO,EAAE,YAAY,CAAC,KAAK,EAAE,eAAO,CAAC,WAAW,CAAC;aACrD,GAAG,CAAC,YAAY,EAAE,YAAY,CAAC,SAAS,EAAE,eAAO,CAAC,SAAS,CAAC;aAC5D,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;;;2HAG6F,CAAC,CAAC;IAC3H,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"testreplacequery.js","sourcesContent":["// Copyright 2016 Frank Lin (lin.xiaoe.f@gmail.com). All rights reserved.\n// Use of this source code is governed a license that can be found in the LICENSE file.\n\nimport * as chai from 'chai';\n\nimport {ReplaceQuery} from '../../sqlquery/replacequery';\nimport {SqlType, Model, SqlFlag} from '../../base/model';\nimport {TableName, Column} from '../../base/decorator';\nimport {timestamp} from '../../base/typedefines';\n\n@TableName('_weather_caches')\nclass WeatherCacheInfo extends Model {\n\n  @Column('id', SqlType.INT, SqlFlag.PRIMARY_KEY)\n  private id_: number;\n\n  @Column('uri', SqlType.VARCHAR_255, SqlFlag.NOT_NULL)\n  uri: string;\n\n  @Column('alias', SqlType.VARCHAR_255, SqlFlag.NOT_NULL)\n  alias: string;\n\n  @Column('meta', SqlType.JSON, SqlFlag.NOT_NULL)\n  meta: any = {};\n\n  @Column('expires_at', SqlType.TIMESTAMP, SqlFlag.NOT_NULL)\n  expiresAt: timestamp;\n\n  init(uri: string, alias: string, meta: any, expiresAt: timestamp) {\n    this.uri = uri;\n    this.alias = alias;\n    this.meta = meta;\n    this.expiresAt = expiresAt;\n  }\n}\n\ndescribe('ReplaceQuery', () => {\n  it('Test build', () => {\n    let weatherCache: WeatherCacheInfo = new WeatherCacheInfo();\n    weatherCache.init('forecast_temperatures', 'shuye_dikuai_1', {}, 1476842006);\n    const sql: string =\n      new ReplaceQuery()\n        .fromClass(WeatherCacheInfo)\n        .where(`uri='${weatherCache.uri}'`, `alias='${weatherCache.alias}'`)\n        .set('uri', weatherCache.uri, SqlType.VARCHAR_255)\n        .set('alias', weatherCache.alias, SqlType.VARCHAR_255)\n        .set('expires_at', weatherCache.expiresAt, SqlType.TIMESTAMP)\n        .build();\n    chai.expect(sql).to.equal(`UPDATE _weather_caches SET uri='forecast_temperatures',alias='shuye_dikuai_1',expires_at=to_timestamp(1476842006) WHERE uri='forecast_temperatures' AND alias='shuye_dikuai_1';\n            INSERT INTO _weather_caches (uri,alias,expires_at)\n            SELECT 'forecast_temperatures','shuye_dikuai_1',to_timestamp(1476842006)\n            WHERE NOT EXISTS (SELECT 1 FROM _weather_caches WHERE uri='forecast_temperatures' AND alias='shuye_dikuai_1');`);\n  });\n});\n"]}