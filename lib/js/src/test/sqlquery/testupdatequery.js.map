{"version":3,"sources":["../src/test/sqlquery/testupdatequery.ts"],"names":[],"mappings":";;;;;;;AAGA,MAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAE7B,8BAA0B,4BAA4B,CAAC,CAAA;AACvD,4BAAgC,sBAAsB,CAAC,CAAA;AACvD,wBAAsC,kBAAkB,CAAC,CAAA;AAIzD,8BAAmB,aAAK;AASxB,CAAC;AARC;IAAC,kBAAM,CAAC,KAAK,EAAE,eAAO,CAAC,GAAG,EAAE,eAAO,CAAC,WAAW,CAAC;iCAAA;AAGhD;IAAC,kBAAM,CAAC,UAAU,EAAE,eAAO,CAAC,OAAO,EAAE,eAAO,CAAC,QAAQ,CAAC;sCAAA;AAGtD;IAAC,kBAAM,CAAC,cAAc,EAAE,eAAO,CAAC,OAAO,EAAE,eAAO,CAAC,QAAQ,CAAC;yCAAA;AAR5D;IAAC,qBAAS,CAAC,OAAO,CAAC;QAAA;AAYnB,QAAQ,CAAC,aAAa,EAAE;IACtB,EAAE,CAAC,oCAAoC,EAAE;QACvC,MAAM,GAAG,GAAW,IAAI,yBAAW,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,KAAK,EAAE,CAAC;QAC3G,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,sDAAsD,CAAC,CAAC;IACpF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE;QACtC,MAAM,GAAG,GAAW,IAAI,yBAAW,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,KAAK,EAAE,CAAC;QACrH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,sDAAsD,CAAC,CAAC;IACpF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE;QACzB,IAAI,IAAI,GAAS,IAAI,IAAI,EAAE,CAAC;QAC5B,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;QACb,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,MAAM,GAAG,GAAW,IAAI,yBAAW,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,UAAU,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC;QAC1F,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,mDAAmD,CAAC,CAAC;IACjF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"testupdatequery.js","sourcesContent":["// Copyright 2016 Frank Lin (lin.xiaoe.f@gmail.com). All rights reserved.\n// Use of this source code is governed a license that can be found in the LICENSE file.\n\nimport * as chai from 'chai';\n\nimport {UpdateQuery} from '../../sqlquery/updatequery';\nimport {TableName, Column} from '../../base/decorator';\nimport {Model, SqlFlag, SqlType} from '../../base/model';\n\n\n@TableName('users')\nclass User extends Model {\n  @Column('uid', SqlType.INT, SqlFlag.PRIMARY_KEY)\n  uid: number;\n\n  @Column('username', SqlType.VARCHAR, SqlFlag.NOT_NULL)\n  username: string;\n\n  @Column('display_name', SqlType.VARCHAR, SqlFlag.NULLABLE)\n  displayName: string;\n}\n\ndescribe('UpdateQuery', () => {\n  it('UpdateQuery with one set and where', () => {\n    const sql: string = new UpdateQuery().table('films').set('kind', 'Dramatic').where(`kind='Drama'`).build();\n    chai.expect(sql).to.equal(`UPDATE films SET kind='Dramatic' WHERE kind='Drama';`);\n  });\n\n  it('UpdateQuery table name from class', () => {\n    const sql: string = new UpdateQuery().tableNameFromClass(User).set('kind', 'Dramatic').where(`kind='Drama'`).build();\n    chai.expect(sql).to.equal(`UPDATE users SET kind='Dramatic' WHERE kind='Drama';`);\n  });\n\n  it('更新语句添加set 过滤属性值为空的属性', () => {\n    let user: User = new User();\n    user.uid = 1;\n    user.username = \"hello\";\n    const sql: string = new UpdateQuery().fromModel(user).where(` uid = ${user.uid}`).build();\n    chai.expect(sql).to.equal(`UPDATE users SET username='hello' WHERE  uid = 1;`);\n  });\n});\n"]}