{"version":3,"sources":["../src/database/pgclient.ts"],"names":[],"mappings":";;;;;;;;;AAGA,MAAY,EAAE,WAAM,IAAI,CAAC,CAAA;AAKzB;IAME,IAAI,CAAC,IAAY,EAAE,QAAgB,EAAE,QAAgB,EAAE,IAAY,EAAE,IAAY,EAAE,GAAW,EAAE,iBAAyB;QACvH,IAAI,MAAM,GAAkB;YAC1B,IAAI,EAAE,IAAI;YACV,QAAQ,EAAE,QAAQ;YAClB,QAAQ,EAAE,QAAQ;YAClB,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,IAAI;YACV,GAAG,EAAE,GAAG;YACR,iBAAiB,EAAE,iBAAiB;SACrC,CAAC;QAEF,IAAI,CAAC,KAAK,GAAG,IAAI,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;IAMD,OAAO,WAAW;QAChB,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;IAC5B,CAAC;IAMD,OAAO,WAAW,CAAC,MAAgB;QACjC,QAAQ,CAAC,SAAS,GAAG,MAAM,CAAC;IAC9B,CAAC;IAOK,KAAK,CAAC,GAAW;;YACrB,IAAI,MAAM,GAAc,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;YACnD,IAAI,CAAC;gBACH,MAAM,CAAC,MAAM,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACjC,CAAC;oBAAS,CAAC;gBACT,MAAM,CAAC,OAAO,EAAE,CAAC;YACnB,CAAC;QACH,CAAC;KAAA;AACH,CAAC;AAjDY,gBAAQ,WAiDpB,CAAA","file":"pgclient.js","sourcesContent":["// Copyright 2016 Frank Lin (lin.xiaoe.f@gmail.com). All rights reserved.\n// Use of this source code is governed a license that can be found in the LICENSE file.\n\nimport * as pg from \"pg\";\n\n/**\n * PostgresSQL client using pg.Pool.\n */\nexport class PgClient {\n\n  private static instance_: PgClient;\n\n  private pool_: pg.Pool;\n\n  init(user: string, password: string, database: string, host: string, port: number, max: number, idleTimeoutMillis: number): void {\n    let config: pg.PoolConfig = {\n      user: user,\n      database: database,\n      password: password,\n      host: host,\n      port: port,\n      max: max,\n      idleTimeoutMillis: idleTimeoutMillis\n    };\n\n    this.pool_ = new pg.Pool(config);\n  }\n\n  /**\n   * Get shared instance.\n   * @returns {PgClient}\n   */\n  static getInstance(): PgClient {\n    return PgClient.instance_;\n  }\n\n  /**\n   * Set shared instance.\n   * @param client PgClient instance.\n   */\n  static setInstance(client: PgClient): void {\n    PgClient.instance_ = client;\n  }\n\n  /**\n   * Query database with sql, you may want to use try catch to get the error returned in Promise.\n   * @param sql SQL.\n   * @returns {QueryResult} Result of query.\n   */\n  async query(sql: string): Promise<pg.QueryResult> {\n    let client: pg.Client = await this.pool_.connect();\n    try {\n      return await client.query(sql);\n    } finally {\n      client.release();\n    }\n  }\n}\n"]}