{"version":3,"sources":["../src/base/model.ts"],"names":[],"mappings":";AAGA,6BAAyB,oBAAoB,CAAC,CAAA;AAK9C;IASE,OAAO,YAAY,CAAkB,GAAQ,EAAE,IAAkB;QAC/D,IAAI,SAAS,GAAoB,uBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAChE,IAAI,QAAQ,GAAM,IAAI,IAAI,EAAE,CAAC;QAC7B,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,SAAS,CAAC,CAAC,CAAC;YAC/B,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QACrD,CAAC;QACD,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IAQD,OAAO,cAAc,CAAkB,IAAW,EAAE,IAAkB;QACpE,IAAI,SAAS,GAAa,EAAE,CAAC;QAC7B,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;YACrB,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;QAChD,CAAC;QACD,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAED,mBAAmB;QACjB,MAAM,cAAc,GAAoB,uBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACnF,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,cAAc,CAAC,CAAC,CAAC;YACpC,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,KAAK,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC1C,MAAM,CAAC,IAAM,QAAQ,CAAC,UAAW,MAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAE,GAAG,CAAC;YAClE,CAAC;QACH,CAAC;QACD,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;IAC5C,CAAC;AACH,CAAC;AAzCY,aAAK,QAyCjB,CAAA;AAYD,WAAY,OAAO;IACjB,qCAAI,CAAA;IACJ,2CAAO,CAAA;IACP,mCAAG,CAAA;IACH,qCAAI,CAAA;IACJ,+CAAS,CAAA;IACT,qCAAI,CAAA;IACJ,2CAAO,CAAA;AACT,CAAC,EARW,eAAO,KAAP,eAAO,QAQlB;AARD,IAAY,OAAO,GAAP,eAQX,CAAA;AAED,WAAY,OAAO;IACjB,mDAAW,CAAA;IACX,6CAAQ,CAAA;IACR,6CAAQ,CAAA;AACV,CAAC,EAJW,eAAO,KAAP,eAAO,QAIlB;AAJD,IAAY,OAAO,GAAP,eAIX,CAAA","file":"model.js","sourcesContent":["// Copyright 2016 Frank Lin (lin.xiaoe.f@gmail.com). All rights reserved.\n// Use of this source code is governed a license that can be found in the LICENSE file.\n\nimport {sqlContext} from \"../util/sqlcontext\";\n\n/**\n * All model object in trustself should inherit from model and declare its table name and sql definition.\n */\nexport class Model {\n  [key: string]: any; // indexer for TypeScript\n\n  /**\n   * Makes model instance from row queried by Postgres.\n   * @param row Row.\n   * @param type Class of T.\n   * @returns {T} Model (subclass of Model) instance.\n   */\n  static modelFromRow<T extends Model>(row: any, type: { new(): T;}): T {\n    let sqlFields: Array<SqlField> = sqlContext.findSqlFields(type);\n    let instance: T = new type();\n    for (let sqlField of sqlFields) {\n      instance[sqlField.name] = row[sqlField.columnName];\n    }\n    return instance;\n  }\n\n  /**\n   * Returns instances from SQL rows.\n   * @param rows SQL rows.\n   * @param type Class of T.\n   * @returns {Array<T>} Model (subclass of Model) instances.\n   */\n  static modelsFromRows<T extends Model>(rows: any[], type: { new(): T;}): T[] {\n    let instances: Array<T> = [];\n    for (let row of rows) {\n      instances.push(Model.modelFromRow(row, type));\n    }\n    return instances;\n  }\n\n  findPrimaryKeyWhere(): string{\n    const sqlDefinitions: Array<SqlField> = sqlContext.findSqlFields(this.constructor);\n    for (let sqlField of sqlDefinitions) {\n      if (sqlField.flag === SqlFlag.PRIMARY_KEY) {\n        return ` ${  sqlField.columnName } = ${ this[sqlField.name] } `;\n      }\n    }\n    throw new Error(\"PRIMAEY_KEY_NOT_EXISTS\");\n  }\n}\n\n/**\n * Wrapper of sql definition.\n */\nexport interface SqlField {\n  name?: string; // field name of model\n  type: SqlType; // column type in table\n  flag: SqlFlag; // flag to indicate some special thing\n  columnName?: string; // column name in table\n}\n\nexport enum SqlType {\n  TEXT,\n  VARCHAR,\n  INT,\n  DATE,\n  TIMESTAMP,\n  JSON,\n  NUMERIC\n}\n\nexport enum SqlFlag {\n  PRIMARY_KEY,\n  NOT_NULL,\n  NULLABLE\n}\n"]}