{"version":3,"sources":["../src/base/model.ts"],"names":[],"mappings":";AAGA,6BAAyB,oBAAoB,CAAC,CAAA;AAK9C;IASE,OAAO,YAAY,CAAkB,GAAQ,EAAE,IAAmB;QAChE,IAAI,SAAS,GAAoB,uBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAChE,IAAI,QAAQ,GAAM,IAAI,IAAI,EAAE,CAAC;QAC7B,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,SAAS,CAAC,CAAC,CAAC;YAC/B,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QACrD,CAAC;QACD,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IAQD,OAAO,cAAc,CAAkB,IAAW,EAAE,IAAmB;QACrE,IAAI,SAAS,GAAa,EAAE,CAAC;QAC7B,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;YACrB,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;QAChD,CAAC;QACD,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;AACH,CAAC;AA/BY,aAAK,QA+BjB,CAAA;AAiBD,WAAY,OAAO;IACjB,qCAAI,CAAA;IACJ,mDAAW,CAAA;IACX,qDAAY,CAAA;IACZ,mCAAG,CAAA;IACH,qCAAI,CAAA;IACJ,+CAAS,CAAA;IACT,qCAAI,CAAA;IACJ,2CAAO,CAAA;IACP,2CAAO,CAAA;AACT,CAAC,EAVW,eAAO,KAAP,eAAO,QAUlB;AAVD,IAAY,OAAO,GAAP,eAUX,CAAA;AAKD,WAAY,OAAO;IACjB,mDAAW,CAAA;IACX,6CAAQ,CAAA;IACR,6CAAQ,CAAA;AACV,CAAC,EAJW,eAAO,KAAP,eAAO,QAIlB;AAJD,IAAY,OAAO,GAAP,eAIX,CAAA;AAKD,WAAY,mBAAmB;IAC7B,iFAAc,CAAA;IACd,iEAAM,CAAA;IACN,iEAAM,CAAA;AACR,CAAC,EAJW,2BAAmB,KAAnB,2BAAmB,QAI9B;AAJD,IAAY,mBAAmB,GAAnB,2BAIX,CAAA;AAKD;IAQE,OAAO,cAAc;QACnB,IAAI,eAAe,GAAoB,IAAI,eAAe,EAAE,CAAC;QAC7D,eAAe,CAAC,IAAI,GAAG,mBAAmB,CAAC,cAAc,CAAC;QAC1D,MAAM,CAAC,eAAe,CAAC;IACzB,CAAC;;IAMD,OAAO,MAAM;QACX,IAAI,eAAe,GAAoB,IAAI,eAAe,EAAE,CAAC;QAC7D,eAAe,CAAC,IAAI,GAAG,mBAAmB,CAAC,MAAM,CAAC;QAClD,MAAM,CAAC,eAAe,CAAC;IACzB,CAAC;IAMD,OAAO,MAAM,CAAC,GAAW;QACvB,IAAI,eAAe,GAAoB,IAAI,eAAe,EAAE,CAAC;QAC7D,eAAe,CAAC,IAAI,GAAG,mBAAmB,CAAC,MAAM,CAAC;QAClD,eAAe,CAAC,MAAM,GAAG,GAAG,CAAC;QAC7B,MAAM,CAAC,eAAe,CAAC;IACzB,CAAC;AACH,CAAC;AAlCY,uBAAe,kBAkC3B,CAAA","file":"model.js","sourcesContent":["// Copyright 2016 Frank Lin (lin.xiaoe.f@gmail.com). All rights reserved.\n// Use of this source code is governed a license that can be found in the LICENSE file.\n\nimport {sqlContext} from '../util/sqlcontext';\n\n/**\n * All model object in trustself should inherit from model and declare its table name and sql definition.\n */\nexport class Model {\n  [key: string]: any; // indexer for TypeScript\n\n  /**\n   * Makes model instance from row queried by Postgres.\n   * @param row Row.\n   * @param type Class of T.\n   * @returns {T} Model (subclass of Model) instance.\n   */\n  static modelFromRow<T extends Model>(row: any, type: { new(): T; }): T {\n    let sqlFields: Array<SqlField> = sqlContext.findSqlFields(type);\n    let instance: T = new type();\n    for (let sqlField of sqlFields) {\n      instance[sqlField.name] = row[sqlField.columnName];\n    }\n    return instance;\n  }\n\n  /**\n   * Returns instances from SQL rows.\n   * @param rows SQL rows.\n   * @param type Class of T.\n   * @returns {Array<T>} Model (subclass of Model) instances.\n   */\n  static modelsFromRows<T extends Model>(rows: any[], type: { new(): T; }): T[] {\n    let instances: Array<T> = [];\n    for (let row of rows) {\n      instances.push(Model.modelFromRow(row, type));\n    }\n    return instances;\n  }\n}\n\n/**\n * Wrapper of sql definition.\n */\nexport interface SqlField {\n  name?: string; // field name of model\n  type: SqlType; // column type in table\n  flag: SqlFlag; // flag to indicate some special thing\n  columnName?: string; // column name in table\n  defaultValue?: SqlDefaultValue; // default value of sql\n  comment?: string; // comment of field\n}\n\n/**\n * Sql Type.\n */\nexport enum SqlType {\n  TEXT,\n  VARCHAR_255, // VARCHAR(255)\n  VARCHAR_1024, // VARCHAR(2014)\n  INT,\n  DATE,\n  TIMESTAMP,\n  JSON,\n  NUMERIC,\n  BOOLEAN\n}\n\n/**\n * Sql flag indicates the key.\n */\nexport enum SqlFlag {\n  PRIMARY_KEY,\n  NOT_NULL,\n  NULLABLE\n}\n\n/**\n * Sql default value type.\n */\nexport enum SqlDefaultValueType {\n  MAKE_RANDOM_ID,\n  NUMBER,\n  SERIAL\n}\n\n/**\n * Default value of sql.\n */\nexport class SqlDefaultValue {\n  type: SqlDefaultValueType;\n  private value_: any;\n\n  /**\n   * Default value type INTEGER and value is random ID.\n   * @constructor\n   */\n  static MAKE_RANDOM_ID(): SqlDefaultValue {\n    let sqlDefaultValue: SqlDefaultValue = new SqlDefaultValue();\n    sqlDefaultValue.type = SqlDefaultValueType.MAKE_RANDOM_ID;\n    return sqlDefaultValue;\n  };\n\n  /**\n   * Default value type INTEGER and value is auto increment integer.\n   * @constructor\n   */\n  static SERIAL(): SqlDefaultValue {\n    let sqlDefaultValue: SqlDefaultValue = new SqlDefaultValue();\n    sqlDefaultValue.type = SqlDefaultValueType.SERIAL;\n    return sqlDefaultValue;\n  }\n\n  /**\n   * Default value type INTEGER, FLOAT or other numeric value and value is specific number.\n   * @constructor\n   */\n  static NUMBER(num: number): SqlDefaultValue {\n    let sqlDefaultValue: SqlDefaultValue = new SqlDefaultValue();\n    sqlDefaultValue.type = SqlDefaultValueType.NUMBER;\n    sqlDefaultValue.value_ = num;\n    return sqlDefaultValue;\n  }\n}\n"]}