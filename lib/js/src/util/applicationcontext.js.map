{"version":3,"sources":["../src/util/applicationcontext.ts"],"names":[],"mappings":";AAQA;IAAA;QACU,YAAO,GAA0B,IAAI,GAAG,EAAE,CAAC;QAC3C,oBAAe,GAAmC,IAAI,GAAG,EAAE,CAAC;IAwCtE,CAAC;IAlCC,mBAAmB,CAAC,QAA0B;QAC5C,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC;IAOD,gBAAgB,CAAC,GAAa;QAC5B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;IAOD,WAAW,CAAC,GAAa,EAAE,QAAkB;QAC3C,IAAI,SAAS,GAAoB,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC/D,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACpC,CAAC;QACD,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAOD,aAAa,CAAC,GAAa;QACzB,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACvC,CAAC;AACH,CAAC;AA1CY,0BAAkB,qBA0C9B,CAAA;AAUU,0BAAkB,GAAG,IAAI,kBAAkB,EAAE,CAAC","file":"applicationcontext.js","sourcesContent":["// Copyright 2016 Frank Lin (lin.xiaoe.f@gmail.com). All rights reserved.\n// Use of this source code is governed a license that can be found in the LICENSE file.\n\nimport {SqlField} from \"../base/model\";\n\n/**\n * Application context for some metadata storage.\n */\nexport class ApplicationContext {\n  private tables_: Map<Function, string> = new Map();\n  private sqlDefinitions_: Map<Function, Array<SqlField>> = new Map();\n\n  /**\n   * Adds sql relationship, used by decorators.\n   * @param relation Sql table name and class name.\n   */\n  addSqlTableRelation(relation: SqlTableRelation): void {\n    this.tables_.set(relation.target, relation.name);\n  }\n\n  /**\n   * Gets table name by class name.\n   * @param cls Class name.\n   * @returns {string} Table name.\n   */\n  findTableByClass(cls: Function): string {\n    return this.tables_.get(cls);\n  }\n\n  /**\n   * Adds sql field description, used by decorators.\n   * @param cls Class.\n   * @param sqlField Sql field.\n   */\n  addSqlField(cls: Function, sqlField: SqlField): void {\n    let sqlFields: Array<SqlField> = this.sqlDefinitions_.get(cls);\n    if (!sqlFields) {\n      this.sqlDefinitions_.set(cls, []);\n    }\n    this.sqlDefinitions_.get(cls).push(sqlField);\n  }\n\n  /**\n   * Gets sql field description by Class.\n   * @param cls Class.\n   * @returns {Array<SqlField>} Definition of the class.\n   */\n  findSqlFields(cls: Function): Array<SqlField> {\n    return this.sqlDefinitions_.get(cls);\n  }\n}\n\n/**\n * SqlTable and model relationship, used as decorators.\n */\nexport interface SqlTableRelation {\n  target: Function; // class\n  name: string; // table name\n}\n\nexport let applicationContext = new ApplicationContext();\n"]}