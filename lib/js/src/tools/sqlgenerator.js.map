{"version":3,"sources":["../src/tools/sqlgenerator.ts"],"names":[],"mappings":"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","file":"sqlgenerator.js","sourcesContent":["// Copyright 2016 Frank Lin (lin.xiaoe.f@gmail.com). All rights reserved.\n// Use of this source code is governed a license that can be found in the LICENSE file.\n\nimport {sqlContext} from '../util/sqlcontext';\nimport {SqlField, SqlType, SqlFlag, SqlDefaultValue, SqlDefaultValueType} from '../base/model';\nimport {Field} from '../migration/column';\n\n/**\n * Used to generate sql file with validation by model.\n */\nexport class SqlGenerator {\n\n  /**\n   * Generates CREATE TABLE sql by given model.\n   * @param cls Subclass of Model.\n   * @returns {string} Sql.\n   */\n  generateCreateTableSql(cls: Function): string {\n    const tableName: string = sqlContext.findTableByClass(cls);\n\n    let sql: string = `CREATE TABLE ${tableName} (\\n`;\n\n    const sqlFields: SqlField[] = sqlContext.findSqlFields(cls);\n    sqlFields.forEach((sqlField: SqlField, index: number) => {\n      const type: string = this.sqlTypeToCreateSyntaxString_(sqlField.type);\n      const flag: string = this.sqlFlagToCreateSyntaxString_(sqlField.flag);\n      let flagWithWhiteSpace: string = '';\n      if (flag !== '') {\n        flagWithWhiteSpace = ` ${flag}`;\n      }\n\n      let comment: string = '';\n      if (sqlField.comment) {\n        comment = ` --${sqlField.comment}`;\n      }\n\n      let comma: string = index === (sqlFields.length - 1) ? '' : ',';\n\n      let defaultValueWithWhiteSpace: string = '';\n      if (sqlField.defaultValue) {\n        // if default value type is SERIAL, use SERIAL syntax\n        if (sqlField.defaultValue.type === SqlDefaultValueType.SERIAL) {\n          sql += `${sqlField.columnName} SERIAL${comma}${comment}\\n`;\n          return;\n        }\n\n        defaultValueWithWhiteSpace = ` DEFAULT ${this.sqlDefaultValueToCreateSyntaxString_(sqlField.defaultValue)}`;\n      }\n\n      sql += `${sqlField.columnName} ${type}${flagWithWhiteSpace}${defaultValueWithWhiteSpace}${comma}${comment}\\n`;\n    });\n\n    sql += `);`;\n    return sql;\n  }\n\n  /**\n   * Generates ALERT TABLE with ADD COLUMN sql.\n   * @param cls Subclass of Model.\n   * @param column Column description.\n   * @returns {string} sql\n   */\n  generateAlertTableWithAddColumnAction(cls: Function, column: Field): string {\n    const tableName: string = sqlContext.findTableByClass(cls);\n    const type: string = this.sqlTypeToCreateSyntaxString_(column.type);\n\n    let defaultValueWithWhiteSpace: string = '';\n    if (column.defaultValue) {\n      defaultValueWithWhiteSpace = ` DEFAULT ${this.sqlDefaultValueToCreateSyntaxString_(column.defaultValue)}`;\n    }\n\n    return `ALTER TABLE ${tableName} ADD COLUMN ${column.name} ${type}${defaultValueWithWhiteSpace};`;\n  }\n\n  /**\n   * Generates ALERT TABLE with DROP COLUMN sql.\n   * @param cls Subclass of Model.\n   * @param columnName Column name.\n   * @returns {string} sql\n   */\n  generateAlertTableWithDropColumnAction(cls: Function, columnName: string): string {\n    const tableName: string = sqlContext.findTableByClass(cls);\n    return `ALTER TABLE ${tableName} DROP COLUMN IF EXISTS ${columnName};`;\n  }\n\n  /**\n   * Generates ALERT TABLE with RENAME COLUMN sql.\n   * @param cls Subclass of Model.\n   * @param oldName Old column name.\n   * @param newName New column name.\n   * @returns {string} sql\n   */\n  generateAlertTableWithRenameColumnAction(cls: Function, oldName: string, newName: string): string {\n    const tableName: string = sqlContext.findTableByClass(cls);\n    return `ALTER TABLE ${tableName} RENAME COLUMN ${oldName} TO ${newName};`;\n  }\n\n  /**\n   * Translate SqlType to string used in CREATE TABLE syntax.\n   * eg: SqlType.INT will be translated to 'INTEGER'.\n   * @private\n   */\n  private sqlTypeToCreateSyntaxString_(sqlType: SqlType): string {\n    switch (sqlType) {\n      case SqlType.INT: return 'INTEGER';\n      case SqlType.VARCHAR_1024: return 'VARCHAR(1024)';\n      case SqlType.VARCHAR_255: return 'VARCHAR(255)';\n      case SqlType.TIMESTAMP: return 'TIMESTAMP';\n      case SqlType.JSON: return 'JSON';\n      case SqlType.NUMERIC: return 'NUMERIC';\n      case SqlType.DATE: return 'DATE';\n      case SqlType.TEXT: return 'TEXT';\n      default: throw Error(`Undefined SqlType ${sqlType}`);\n    }\n  }\n\n  /**\n   * Translate SqlFlag to string used in CREATE TABLE syntax.\n   * eg: SqlFlag.PRIMARY_KEY will be translated to 'PRIMARY KEY'.\n   * @private\n   */\n  private sqlFlagToCreateSyntaxString_(sqlFlag: SqlFlag): string {\n    if (sqlFlag === SqlFlag.PRIMARY_KEY) {\n      return 'PRIMARY KEY';\n    }\n    return '';\n  }\n\n  /**\n   * Translate SqlDefaultValue to string used in CREATE TABLE syntax.\n   * eg: SqlDefaultValueType.MAKE_RANDOM_ID will be translated to 'make_random_id'.\n   * @private\n   */\n  private sqlDefaultValueToCreateSyntaxString_(sqlDefaultValue: SqlDefaultValue): string {\n    if (sqlDefaultValue.type === SqlDefaultValueType.MAKE_RANDOM_ID) {\n      return 'make_random_id()';\n    }\n    return '';\n  }\n}\n\nexport let sqlGenerator = new SqlGenerator();\n"]}